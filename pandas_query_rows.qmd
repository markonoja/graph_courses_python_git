

# Imports

```{python}
import pandas as pd
```

# Dataset

```{python}
yaounde = pd.read_csv("data/yaounde_data.csv")
```

# create a subset 

```{python}
yao = yaounde[["age", "sex", "weight_kg", "neighborhood", "occupation", "symptoms", "is_smoker", "is_pregnant", "igg_result", "igm_result"]]
yao
```

# introduce query 


```{python}
yao.query("sex == 'Male'")
```


```{python}
# Get the number of rows and columns that fufill the criterion
yao.query("sex == 'Male'").shape
```


```{python}
# Get the number of rows that fufill the criterion
yao.query("sex == 'Male'").shape[0]
```


```{python}
# queries do not modify the dataframe itself
# you need to create a new object/variable
yao_male = yao.query("sex == 'Male'")
yao_male
```

# Practice Q: Subset pregnant respondents

 Pregnant individuals have the is_pregnant column set to “Yes”. Subset ust these individuals and store the result in a new   new DataFrame called yao_pregnant. Then print this new DataFrame. 

 
 ```{python}
 yao_pregnant = yao.query("is_pregnant == 'Yes'")
 yao_pregnant
 ```

 # Relational operators

 ```{python}
 yao.query("sex == 'Male'") # Equal to
 yao.query("sex != 'Male'") # Equal to
 yao.query("age > 7") # greater than
 yao.query("age >= 7") # greater than or equal to
 yao.query("age < 7") # less than
 yao.query("age <= 7") # less than or equal to
 # isin
 yao.query("neighborhood.isin(['Briqueterie', 'Carriere'])")
 ```

 # Practice Q: Relational operator

 From yao, keep only respondents who were children (under 18). 
 Assign the result to a new Dataframe called yao_children. 
 There should be 291 rows.


 With isin(), keep only respondents who live in "Carriere" or "Ekoudou" neighborhoods. 
 Assign the result to a new DataFrame called yao_carriere_ekoudou. 
 There should be 426 rows

 # Response 1
 
 ```{python}
 yao_children = yao.query("age < 18")
 yao_children
 ```


# Response 2
```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Carriere', 'Ekoudou'])")
yao_carriere_ekoudou
```

# Accessing external variables


```{python}
min_age = 25

yao.query("age >= @min_age")
```

# Practice Q: subset for young respondents

From yao, keep respondents who are less than or  
equal to the variable max_age which is 30, defined below.
Assign the result to a new DataFrame called 
yao_young. There should be 590 rows.

```{python}
max_age = 30

yao_young = yao.query("age <= @max_age")
yao_young
```

# Combining conditions

# example 1

```{python}
#age less than 18 or age greater than 65

yao.query("age < 18 | age > 65")
```

# example 2

```{python}
# either pregnant or ex-smokers
yao.query('is_pregnant == "Yes" | is_smoker == "Ex-smoker"')
```

# example 3

```{python}
# pregnant and ex-smokers
yao.query('is_pregnant == "Yes" & is_smoker == "Ex-smoker"')
```

```{python}
# Get unique values in columns
yao.is_smoker.value_counts()
```

# Practice Q: Subset for IGG positive men

Subset yao to only keep men who tested IgG positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query. Think carefully about whether to use & or |.


```{python}
# men and positive for igg_result
yao_igg_positive_men = yao.query('sex == "Male" & igg_result == "Positive"')
yao_igg_positive_men
```

# Negating conditions with the ~ operator


```{python}
# return individuals who do not fulfill the condition
yao.query(" ~ (occupation == 'Student')")
```


```{python}
# Above is equivalent to:
yao.query("occupation != 'Student'")
```


# Enclosing multiple conditions in parenthesis
```{python}
# return individuals who are not less than 18 yrs or weight_kg not less than 30
yao.query(" ~ (age < 18 | weight_kg < 30)")
```

# Practice Q: Drop Smokers and drop those above 50

We want to avoid giving a drug to older individuals and smokers. From yao, drop respondents that are either above 50 or who are smokers. Use ~ to negate the conditions. Assign the result to a new DataFrame called yao_dropped. Your output should have 810 rows.


```{python}
yao_dropped = yao.query(" ~ (age > 50 | is_smoker == 'Smoker') ")
yao_dropped
```

# NaN values

```{python}
# yao.query("is_pregnant == 'NaN' ")
# this does not work
```

# Query for individuals who have NaN value
```{python}
yao.query("is_pregnant.isna()")
```


# Query for individuals who don't have na value
```{python}
yao.query("is_pregnant.notna()")
```

# Practice Q: keep missing Smoking Status

From the yao dataset, keep all the respondents who had NA records for the report of their smoking status.


```{python}
yao.query("is_smoker.isna()")
```

# Querying Based on String Patterns

First, let’s take a look at the unique values in the occupation column:

```{python}
yao.occupation.value_counts().to_dict()
```


```{python}
# Values containing the string Student
yao.query("occupation.str.contains('Student')")
```

# Negating String Containment
To find respondents who are not students (i.e., their occupation does not contain “Student”), you can use the ~ operator

```{python}
# Values not containing the string Student
yao.query(" ~ (occupation.str.contains('Student'))")
```

# Using | with string containment

```{python}
# Contains student or Farmer
yao.query(" occupation.str.contains('Student|Farmer')")
```


# Practice Q: Symptoms
Query yao to find respondents who reported “Cough” or “Fever” as symptoms. Your answer should have 219 rows.

```{python}
yao.query("symptoms.str.contains('Cough|Fever')")
```